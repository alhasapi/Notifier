#!/usr/bin/python

import sys
import os
import random
from pprint import pprint as pp

EMPTY_STRING = ""
AUTHOR_MARK = ".--"
QUOTES = []

cmd = "/usr/bin/notify-send \"%s\" \"%s\""
quotes_path = "/home/moktar/workspace/lab/quotes/"


class ListWraper:
    funcs = { 'map' : map, 'filter' : filter, 'reduce' : reduce }
    def __init__(self, iterable):
        callables = [ self.genfunc(runnable) for runnable in ListWraper.funcs.keys() ]
        for (attr, value) in zip(ListWraper.funcs.keys(), callables):
            setattr(self, attr, value)
        self.alias_method('collect',  self.map)
        self.alias_method('where', self.filter)
        self.alias_method('fold',  self.reduce)
        self.iterable = iterable
    
    def to_s(self):
        return "[" + ', '.join(str(q) for q in self.iterable) + "]"

    __str__ = __repr__ = to_s

    def __iter__(self):
        for item in self.iterable:
            yield item

    def alias_method(self, new_method_name, old_method):
        import copy
        method = copy.deepcopy(old_method)
        method.__name__ = new_method_name
        setattr(self, new_method_name, method)

    def genfunc(self, name):
        def unamed(func):
            self.iterable = ListWraper.funcs[name](func, self.iterable)
            return [ self, ListWraper([self.iterable]) ][ name is 'reduce']
        unamed.__name__ = name
        return unamed

def get_quotes_authors():
    has_an_author = lambda quote: AUTHOR_MARK in quote
    quotes_authors = lambda quote: quote.split(AUTHOR_MARK)[-1]
    quotes = ListWraper(QUOTES)
    names = quotes.filter(has_an_author).map(quotes_authors)
    return [name.strip() for name in names]
    
def selectQuotesByAuthor(author):
    authors = get_quotes_authors()
    author_selector = lambda quote:(AUTHOR_MARK in quote and 
                                    author.lower() in quote.lower())

    if author not in authors:
        raise SyntaxError("%s in not in our data base." %author)
    quotes = ListWraper(QUOTES)
    return [quote for quote in quotes.filter(author_selector)]
    

def load_quotes(record=False):
    slurp = lambda s: open(s).read()

    def add_path(source):
        return quotes_path + source

    def monster_eat(fname):
        txt = slurp(fname).splitlines()
        not_empty = lambda x: x != EMPTY_STRING 
        not_capitalized_or_digit = lambda x: not x[0].isupper() and not (x[0].isdigit())
        clean_quotes = filter(not_capitalized_or_digit, filter(not_empty, txt))
        return " ".join(clean_quotes)
    
    def parse_quotes(fname):
        raw_data = open(fname).read().splitlines()
        stripped_data = map(lambda z: z.strip(), raw_data)
        selector  = lambda s: s if s is not "" else "|" 
        quotes = ''.join(selector(q) for q in stripped_data).split('|')
        return quotes

    def save_in_a_file(data, fname="qts.txt"):
        with open(fname, "a") as out:
            out.write(data)
    
    quotes = os.popen("ls " + quotes_path).read().splitlines()
    qts = []
    inser_them = lambda s: QUOTES.append(s)
    for quote in quotes:
        #if 'russ' in quote:
        #    qts += monster_eat(quote).split('.')
        #    map(inser_them, qts)
        if 'quotes.txt' == quote:
            quots = parse_quotes(add_path(quote))
            map(inser_them, quots)
        else:
            quote = quotes_path + quote
            data = slurp(quote) 
            QUOTES.append( data )
            qts += [data]
    if record:
        save_in_a_file("\n".join(q for q in qts))

class OpenStruct:
    _fields = ["hour", "min", "sec"]
    def __init__(self, *args):
        for (attr, name) in zip(self._fields, args):
            setattr(self, attr, name)

class TimeNode:
    def __init__(self, tdata):
        data = tdata.split()
        self.day     = data[0]
        self.month   = data[1]
        self.today   = data[2]
        self.now = OpenStruct(*map(int, data[3].split(':')))
        self.year = data[-1]

def formulaByTime(name="Professeur"):
    import time
    current = TimeNode(time.asctime())
    formula = "%s " + name
    now = current.now
    if now.hour < 12:
        return formula %( "Bonjour" )
    elif 12 > now.hour > 18:
        return formula %( "Bon apres midi" )
    else:
        return formula %( "Il est temps de programmer" ) 


def saluer(msg):
    return cmd %(formulaByTime(), msg)

if __name__ == '__main__':
    load_quotes(True)
    # pp(QUOTES)
    lenght = len(QUOTES) - 1
    idx = random.randint(0, lenght)
    quote = QUOTES[idx]
    authors = get_quotes_authors()
    print quote
#    default_msg = "Notre societe souffre d'un besoin excessif d'uniformite".upper()
    os.popen(saluer(QUOTES[idx]))


